#  The Ministry of Statistics, basic config

#  The config file assumes a basic format of
#  variable = value

#  Leading and trailing whitespace are trimmed, as is whitespace around the =
#  sign.  If no value is presented, a value of 1 is assumed, allowing bare
#  values to toggle on behaviour.

#  Further files can be read in, using the mechanism of
#  include = <file path>

#  The current section context is preserved and included files are read in
#  before continuing with the previous file.  Circular inclusion loops are
#  detected, and moaned about.




[Main]
#  Basedir is used to chdir to and forms the path for any relative filenames
#basedir = /

#  Pidfile can be overridden on the command line, and the init script does do
#  that!
#pidfile = /var/run/ministry/ministry.pid

#  The tick_msec value is used by an internal thread to mark time, and it
#  also helps define the responsiveness of ministry to shutdown
#tick_msec = 20


[Logging]
#  Log level is one of debug info notice warn err fatal
#  Either notice or info is recommended
#level = info

#  Logging is buffered up until the file is opened successfully.  If you are
#  Using logrotate, a pkill -HUP ministry will cause the file to be closed
#  and reopened
#file = /var/log/ministry/ministry.log


[Memory]
#  This is the direct control of the memory management code within ministry.
#  Ministry eschews a lot of malloc and free in favour of keeping structures
#  and re-using them.  This gives us some tuning parameters and avoids long-
#  term fragmentation issues.

#  Ministry keeps an eye on its overall RSS, and will exit if it uses too
#  much.  This is because it keeps structures in memory, up to about 6k, for
#  each metric path it's ever seen.  While it does garbage collect paths that
#  have not seen metrics in a a while, this can take an hour or so with
#  default settings, so it also has more short term protection against being
#  flooded with one-time paths.  The default is 10GB
#max_mb = 10240

#  The max_mb value is also expressible as max KB if you want more precise
#  control.  Don't use both - last one wins
#max_kb = 10485760

#  The interval of memory checking is configurable as well - this is how
#  many MSEC ministry waits in betweeen RSS checks
#interval = 5000


#  Ministry keeps a hash table of paths for each of stats and adder paths.
#  They are separate but, for now, configured together.  This value is the
#  size of the hash table in which DHASH structures (the metric structure)
#  live.  The path is hashed, and then modulo'd against this size to pick
#  the table index.  Experience suggests that prime numbers are good, and the
#  performance is best with about an average of 1-1.5 paths per table slot,
#  so make this number about the same size as the number of paths / stats
#  you have.  When counting, remember not to could up all the lower, upper,
#  mediam, etc metrics - they are generated!  Look at the layer below that.

#  As this is purely a table of pointers, having it too large is not very
#  wasteful - on a 64bit systems the table is 8 bytes * hashsize
#hashsize = 100003


#  Ministry's GC is very limited - it recycles old DHASH structures for paths
#  that appear to have gone inactive.  This prevents us keeping old paths
#  forever (or until a restart).  This will not make graphite/coal/influx
#  tidy them up!   What happens is that every time stats are processes, if a
#  path has no values, it's 'empty' counter is incremented.  It it reaches a
#  threshold then the next GC run will make it unusable, and then the one
#  after will reap it and free it.  If you are extending ministry yourself,
#  beware - ministry does not 'have GC'.  It's only for DHASH structures.

#  The threshold of how many stats passes must find a structure empty is what
#  can be configured, but the default of 360 (so with a 10-second report
#  interval, that's an hour) should do you fine.  Tweak if if you tweak the
#  report interval
#gc_thresh = 360



#  Each of ministry's memory-controlled types is pre-allocated in blocks
#  which are made into the 'free list' of structs of that type.  They all
#  have ->next elements first, and that's how it works.  So each can be
#  pre-allocated in configurable blocks.  Powers of two please.  Future
#  releases might force this by changing it to require the power of two to
#  use, not the resulting number (eg 128 might become 7)

#  Host structures are for controlling a connected source of data
#hosts.block = 128

#  Iobufs are used for sending data on to targets, and receiving from hosts
#iobufs.block = 128

#  Iolist is used to manage sending one buf to multiple targets
#iolist.block = 512

#  Dhash is the metric data structure
#dhash.block = 512

#  Points is a struct containing multiple (float) data points
#points.block = 512


[Network]

#  Network timeout sets how long a source connection has to be silent for
#  before we consider it dead and close the connection.  Don't set this too
#  low or clients will keep having to reconnect.
#  This value is in SECONDS
#timeout = 3600

#  Ministry does not write directly to network from it's statistics generation
#  code, to prevent that having to cope with the vaguaries of networks.  It
#  writes iobufs instead, lumps of outbound data, and io happens async after
#  a time.  The io threads associated with each target wake up after so long
#  and send any outstanding data.  If you have a large amount of data you
#  might want to tune this down, but it chews some cpu if it's too fast.  This
#  is configured in MSEC
#io_msec = 500

#  The maximum number of waiting buffers on a target is not done with a view
#  to how much each one holds - 100 buffers with 10 bytes in each is still
#  100 buffers.  Tune this up if data is going missing, but it can result in
#  significant memory use if a target is down.
#max_waiting = 128

#  Ministry will attempt to reconnect to a down target every so often, and
#  that is configured in MSEC
#reconn_msec = 5000

#  Ministry listens for UDP packets if configured to do so, but by default
#  recv() just waits forever.  Thus we set a receive timeout value and loop
#  around in quiet times.  This value affects how responsive ministry is to
#  shutdown.  You shouldn't need to change it.  It is in SECONDS.
#rcv_tmout = 3


#  Ministry targets an instance of graphite, coal or influx ideally, and it
#  uses graphite wire format, "<metric> <value> <timestamp>\n".  It can write
#  to multiple targets and manages this with the iolist structures, whereby
#  a buffer is marked as having multiple refs and they tick down each time
#  the buffer is sent.  The targets are expressed as either IP addresses or
#  DNS names, and are looked up.  An optional port can be added - the default
#  is graphite's port 2003.  As with all multiple values in ministry, they
#  should be comma separated with no spaces, eg foo:2003,bar:2003
#target = 127.0.0.1:2003


#  There are three types of port listened on, data (stats for analysis),
#  adder (point to sum up) and statsd (legacy statsd format).  They can each
#  be individually enabled or disabled, and have tcp or udp enabled separately.
#  Their listen ports for each can also be controlled separately.

#  A note on performance.  Connecting TCP clients are handled in their own
#  thread, so a busy client does not impact a quiet client.  But it is not
#  practical to have a pthread per UDP packet.  So there is one per UDP
#  port listened on.  If you need more UDP-based performance, configure more
#  than one UDP port and have clients spray liberally across them - there is
#  no difference in the handling of the data.


#  Data - stats data, of the format "<path> <value>\n"  It is stored, and
#  every stats interval it is processed to produce stats about it.  The
#  actual data is not presented to graphite - just highest, lowest, and some
#  other metrics about it.

#  Adder - summation data, for where multiple sources must have the same
#  path data added together, which graphite makes a mess of.  It is done in
#  very similar fashion to the above, and has the same format.

#  Statsd - a format compliant with parts of Etsy's statsd process, in order
#  to allow processes which have that pre-built into them to talk to ministry.
#  Format "<path>:<value>|<c or ms>\n".  Some of the more complex parts of
#  statsd's behaviour are not duplicated.


#  Enable - switch on this port type
#data.enable   = 1
#adder.enable  = 1
#statsd.enable = 1

#  TCP - light up tcp ports for this type
#data.tcp_enable   = 1
#adder.tcp_enable  = 1
#statsd.tcp_enable = 1

#  UDP - light up udp ports for this type
#data.udp_enable   = 1
#adder.udp_enable  = 1
#statsd.udp_enable = 1

#  UDP port(s).  A comma-separated list of UDP ports to listen on.
#data.udp.port   = 9125
#adder.udp.port  = 9225
#statsd.udp.port = 8125

#  TCP port.  (It makes no sense to have multiple TCP ports)
#data.tcp.port   = 9125
#adder.tcp.port  = 9225
#statsd.tcp.port = 8125

#  TCP bind address - which IP address to bind to.  Defaults to all.
#data.tcp.bind   = 0.0.0.0
#adder.tcp.bind  = 0.0.0.0
#statsd.tcp.bind = 0.0.0.0

#  TCP backlog - how many outstanding connections to queue up
#data.tcp.backlog   = 32
#adder.tcp.backlog  = 32
#statsd.tcp.backlog = 32



#  This section controls stats generation and submission
[Stats]

#  Thresholds are the percentage markers for reporting.  Ministry only
#  supports whole-percent markers at present - per-mille is an option for
#  later.  This is a comma-separated list and is not restricted to the upper
#  half - it is entirely reasonable to have values set to "10,90" for example
#  to examine outliers.  Values above 50 are reported as upper_%d and those
#  below are reported as lower_%d.  0, 50 and 100 are not accepted - lower,
#  median and upper are reported anyway.  None are set by default, but 90,99
#  are popular choices for statsd hackers
#thresholds = 


#  Then the rest come in two types, stats and adder.  These are differently
#  (and, I admit, a little confusingly) named to the network ports, but those
#  relate to incoming format, and both data and statsd|ms go to stats, and
#  adder and statsd|c go to adder.  So these now relate to outgoing data,
#  one being summed metrics, the other being metadata about input values.
#  There is a third category - self.  Ministry reports some stats about
#  itself (not many yet, more will be coming at some point).


#  Enable or disable for each type - does what it sounds like
#stats.enable = 1
#adder.enable = 1
#self.enable = 1



#  Prefix - path elements to prepend to all metrics.  Etsy's statsd prepends
#  'stats.timers.' to all stats metrics by default.  This is duplicated in
#  ministry because it was intended as a drop-in replacement (with options
#  to use it's preferred formats when possible) and moving metrics around in
#  graphite is a real pain.  Won't somebody think of the dashboards?  So the
#  old behaviour is supported.

#  The adder is intended to be transparent so has no default prefix, and
#  ministry's own stats are tucked away inside stats.ministry.  Ministry will
#  add a . to the end of the prefix if it's non-zero length and you forgot.

#stats.prefix = stats.timers.
#self.prefix  = stats.ministry.

#  Only uncomment this is you are setting a string - an empty value will
#  become "1"
#adder.prefix =


#  Ministry creates a set number of threads to do stats/adder processing.
#  Adder might happily run on just 1 or 2, but stats calculations include a
#  qsort() to get all those fixed thresholds and that chews CPU.  So a larger
#  number is useful.  If you find it is chewing too much CPU every stats
#  period, tune this down a little.  It will only slightly affect the accuracy
#  of the time windowing.

#  Ministry's processing threads first pass across the DHASH table, 'stealing'
#  the data to be processed - a DHASH structure contains both an incoming and
#  a processing location for data, and the data is moved from incoming to
#  processing first.  Only once this is complete does ministry go back and
#  process the data it stole - this means ministry's concept of 10 seconds
#  worth of data is pretty precise.  The pass across the whole table to do
#  the steal is sub-millisecond with 20,000 paths, and is deterministic - it
#  passes across the table in the same order every time.

#stats.threads = 6
#adder.threads = 2
#self.threads  = 1


#  Ministry's loop control has the option to synchronise to a clock, so that
#  a 10-second period will result in stats collection at minute:00, minute:10,
#  etc etc.  Stats collection and adder collection thus happens precisely on
#  the period marker.  This means that if a client submits data in or around
#  the period marker is may oscillate back and forth between which time
#  bucket it submits in.  If this is happening in your estate (look for
#  oscillating data that you expected to be stable) then you can set an offset
#  in stats collection to allow for this.

#  An example.  You have some processes that submit metrics every 2 seconds
#  which include some you want adding up.  They submit on or around the 2
#  second mark, but may well submit up to 30msec late.  Rather than have the
#  data in those late submission count against the *next* period, offset the
#  calculation a little to catch them.  In this example, anything up to 2
#  seconds should be fine - apps are less often early.  But to account for
#  clock drift and the vaguaries of VMs and such, an offset of 400msec might
#  see all submissions going where they belong.
#
#  This value is in MSEC
#stats.offset = 0
#adder.offset = 0


#  The last thing - submission period (or interval).  This is how often
#  ministry submits stats onwards.  The default is 10 seconds, or rather
#  10000 msec.  Ministry will sync to the clock time to enact this, so if you
#  specify 10 seconds, it will be on the :00, :10, :20, second boundaries.
#  When shut down, ministry will wait to submit the data it has got, so it
#  may take up to one period to shut down.

#  There is no requirement to keep your submission periods the same between
#  adder and stats, but experience suggests you should, if only for the sake
#  of graphs that include both data.

#  Reducing the submission period to 1 second works fine, but be advised that
#  that is the lower limit of graphite resolution.
#
#  This value is in MSEC
#stats.period = 10000
#adder.period = 10000


[Synth]

# Synthetic Metrics

# Synthetics are metrics derived from submitted metrics, but which are not
# directly provided by a source.  For example:

# Suppose two metrics are supplied by a source, total requests lamp.requests
# and customer purchases, user.purchases
#
# To watch for anomalies in either metric is hard, because of the sheer
# variability in each metric over time.  However, customers may well have a
# fairly stable set of paths to making a purchase, so the ratio of the two is
# a more useful metric.
#
# This metric could be generated a fetch time from whatever time-series DB
# things end up in, but it may make sense to keep the metric separately (if
# you alert on it, for example).

# So what's needed is the ability to divide the number of requests by the
# number of purchases.  This is accomplished by creating a synthetic metric
# from those two, dividing lamp.requests by user.purchases.  Ministry will
# do this at metric calculation time.
#
# target = lamp.requests_per_purchase
# source = lamp.requests
# source = user.purchases
# operation = ratio
# factor = 1
# done

# Then, along with submitting onward a value for each of the two source
# metrics, ministry will submit the calculated metric.  There is no difference
# in how they are presented downstream.

# By default, no synthetic metrics are defined.  Each synthetic must have a
# target path, a number of sources, and operation, and each must be marked
# 'done' to complete it.  Basic error checking is done to make sure a config
# block defining a synthetic has everything it must have (all operations have
# a minimum number of parts).


# Target metric should not be submitted to directly - submissions to it are
# ignored.
# target = my.synthetic.metric

# Source metrics obviously won't exist when ministry starts up, so error
# checking to see that they exist is obviously not possible.  It an expected
# synthetic is not showing up, check all of it's component sources are being
# submitted at the same time.
#
# The maximum number of sources per synthetic is 32.
# source = source.metric.first
# source = source.metric.second
# ...


# The factor value is applied to the calculated result.  It's purpose is to
# allow percent calculations, etc etc.  It defaults to 1 if not supplied.
# factor = 1

# The supported operations are:
# Name      Min Parts      Description
# sum       1              Sum up all sources
# diff      2              Source 2 subtracted from source 1
# ratio     2              Source 1 divided by source 2 (if != 0)
# max       1              Highest value amongst all sources
# min       1              Lowest value amongst all sources
# spread    1              Gap between highest and lowest values
# mean      1              Mean of all values provided
# count     1              Count of non-zero values



